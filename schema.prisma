datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  Id_User         String       @id @default(uuid())
  name            String?      @db.VarChar(50)
  last_name       String       @db.VarChar(20)
  first_name      String       @db.VarChar(20)
  birth_date      DateTime
  mail            String       @unique @db.VarChar(25) // Ensure mail is unique
  password        String       @db.VarChar(50)
  isAdmin         Boolean?
  seed_totp       String?
  posts           Post[]
  comments        Comments[]
  messages        Message[]
  notifications   Notifications[]
  settings        Settings[]
  userFriends     Friend[]     @relation("UserFriends")
  friendOf        Friend[]     @relation("FriendOf")
  reports         Reports[]
  conversations   Discuss[]

  @@map("Users")
}


model Post {
  Id_Post       String      @id @default(uuid())
  content       String
  visibility    String      @db.VarChar(50)
  toxic_score   Decimal     @db.Decimal(2, 1)
  image_exists  Boolean?
  date_creation DateTime
  verified      Boolean?
  Id_User       String
  user          Users       @relation(fields: [Id_User], references: [Id_User], onDelete: Cascade)
  comments      Comments[]
  api_results   API_result?

  @@map("Post")
}

model Comments {
  Id_Comment          String      @id @default(uuid())
  content             String
  date_upload         DateTime
  toxic_score         Decimal     @db.Decimal(2, 1)
  image_exists        Boolean?
  verified            Boolean?
  Id_Comments_replied Int
  Id_Post             String
  Id_User             String
  post                Post        @relation(fields: [Id_Post], references: [Id_Post], onDelete: Cascade)
  user                Users       @relation(fields: [Id_User], references: [Id_User], onDelete: Cascade)
  api_results         API_result?

  @@map("Comments")
}

model Message {
  Id_Message  String       @id @default(uuid())
  content     String
  date_upload DateTime
  Id_User     String
  user        Users        @relation(fields: [Id_User], references: [Id_User], onDelete: Cascade)
  API_result  API_result[]

  @@map("Message")
}

model Notifications {
  Id_Notifications String  @id @default(uuid())
  type             String  @db.VarChar(50)
  content          String?
  date_upload      String?
  Id_User          String
  user             Users   @relation(fields: [Id_User], references: [Id_User], onDelete: Cascade)

  @@map("Notifications")
}

model Settings {
  Id_Settings     String  @id @default(uuid())
  data_type       String  @db.VarChar(50)
  content         String
  confidentiality Boolean
  Id_User         String
  user            Users   @relation(fields: [Id_User], references: [Id_User], onDelete: Cascade)

  @@map("Settings")
}

model Conversation {
  Id_Conversation String    @id @default(uuid())
  name            String?
  Discuss         Discuss[]

  @@map("Conversation")
}

model API_result {
  Id_api_result String       @id @default(uuid())
  Id_Categories Int
  flagged       Boolean?
  Id_Message    String
  Id_Post       String       @unique
  Id_Comment    String       @unique
  message       Message      @relation(fields: [Id_Message], references: [Id_Message], onDelete: Cascade)
  post          Post         @relation(fields: [Id_Post], references: [Id_Post], onDelete: Cascade)
  comment       Comments     @relation(fields: [Id_Comment], references: [Id_Comment], onDelete: Cascade)
  Categories    Categories[]

  @@map("API_result")
}

model Categories {
  Id_Category   String     @id @default(uuid())
  name          String     @db.VarChar(50)
  score         String?
  Id_api_result String
  api_result    API_result @relation(fields: [Id_api_result], references: [Id_api_result])

  @@map("Categories")
}

model Friend {
  Id_User   String
  Id_Friend String
  user      Users  @relation("UserFriends", fields: [Id_User], references: [Id_User], onDelete: Cascade)
  friend    Users  @relation("FriendOf", fields: [Id_Friend], references: [Id_User], onDelete: Cascade)

  @@id([Id_User, Id_Friend])
  @@map("Friend")
}

model Report {
  Id_Report   String    @id @default(uuid())
  Id_Reporter String
  Id_Reported String
  type        String?
  reason      String?
  Reports     Reports[]

  @@map("Report")
}

model Reports {
  Id_User   String
  Id_Report String
  user      Users  @relation(fields: [Id_User], references: [Id_User], onDelete: Cascade)
  report    Report @relation(fields: [Id_Report], references: [Id_Report], onDelete: Cascade)

  @@id([Id_User, Id_Report])
  @@map("Reports")
}

model Discuss {
  Id_User         String
  Id_Conversation String
  user            Users        @relation(fields: [Id_User], references: [Id_User], onDelete: Cascade)
  conversation    Conversation @relation(fields: [Id_Conversation], references: [Id_Conversation], onDelete: Cascade)

  @@id([Id_User, Id_Conversation])
  @@map("Discuss")
}
